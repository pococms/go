#!/bin/zsh
# Generates pages test such theme features as:
# - Article only with no header,nav,aside, or footer
# - Header on/off
# - Nav on/off
# - Footer on/off
# - Aside on/off
# - Aside left
# - Aside aside right
# - and more
echo ""
theme=$1

if [ -z "$theme" ]
then
  echo "Please add a theme name. Example:\n\n\t${0} mytheme\n" && exit 1
fi

function print_help(){
  echo "Options:"
  echo "\t-l|--link-stylesheets" >&2
  echo "\tLink to stylesheets instead of inlining in the HTML. The default is inline. Example:\n\t${1} -l\n" >&2
}


# PARSE COMMAND LINE
echo ""
while :; do
    case $1 in
    
   	 -l|--link-styles)
       LINK_STYLES="--link-styles"
       shift
       ;;

   	 -h|--help)
       print_help $0
       exit 1
       ;;

   	 --)
   		 shift
   		 break
   		 ;;
   		 
   	 --?*)
       echo "Filename? ${1}"
   		 #printf 'WARNING: Unknown option %s\n' "$1" >&2
       #exit 1
       break
   		 ;;
   		 
   	 *)
       theme=$1
   		 # No more options. Break out of loop.
   		 break;
    esac
    
    command shift
done






# Get a temporary directory name
#tmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t 'tmpdir')
t=$(mktemp -d 2>/dev/null || mktemp -d -t 'tmpdir')
# Append to the filename and make in a Markdown file(name).
tmpdir=$t/foo
filename=$tmpdir/index.md

wait_for_yes() {
  while :; do
    echo -n "${1} "
    read answer
    case "$answer" in
      [Yy])
        return 0
        ;;
      [Nn])
        return 1
        ;;
      *)
        ;;
    esac
  done
}

# Explanation of how to test the theme interactively
read -r -d '' INTERACTIVE_TESTING << EOM

# Default sans-serif, weight 900
## Font stack default, weight 900

* Level 1 bullet
  - Level 2 bullet
* Another level 1 bullet

1. How does this look?
2. Next to this?
3. And finally this?

### How to test a theme
* Stretch it wide and shrink it to phone proportions to ensure it's responsive
* Make sure it works well with a [long article](default.html)
EOM

read -r -d '' MAIN_LINKS << EOM
$INTERACTIVE_TESTING
* [Default version of theme](default.html)
* **Article** [from file](article-from-file.html), [suppressed](suppress-article.html), [article only](article-only.html)
* [Header suppressed](suppress-header.html), [Nav suppressed](suppress-nav.html), [Footer suppressed](suppress-footer.html)
* **Aside** [suppressed](suppress-aside.html), [right](aside-right.html), [left](aside-left.html)
* Diagnostics: [Default theme with background shaded](shaded.html)
EOM


# Macro for a full demo document
# This inserts a file into the stream
# and assigns the whole thing to the
# variable $MDEMO
read -r -d '' MDEMO << EOM
$MAIN_LINKS
$(<.poco/demo/mdemo.md)
EOM


read -r -d '' DEFAULT << EOM
# Theme with default options
$MDEMO
EOM

read -r -d '' SHADED << EOM
---
styles:
- "header{background-color:gainsboro;}"
- "nav{background-color:silver;}"
- "article{background-color:gray;}"
- "aside{background-color:lightslategray;}"
- "footer{background-color:darkslategray;}"
---
# Theme with default options but shading added
# to all page layout elements
$MDEMO
EOM

read -r -d '' ARTICLE_ONLY << EOM
---
header: "SUPPRESS"
nav: "SUPPRESS"
aside: "SUPPRESS"
footer: "SUPPRESS"
---
# Article only

$MDEMO
EOM

# This will create a filenamed article-file.md to use
# the filename feature where front matter can look like
# this:
# ---
# article: "article-file.md"
# ---
read -r -d '' ARTICLE_FILE << EOM

# This is a replacement article.

It was generated using an exterior file,
using front matter like this:

      ---
      article: "article-file.md"
      ---
EOM

read -r -d '' ARTICLE_FROM_FILE << EOM
---
article: "article-file.md"
---
EOM

read -r -d '' SUPPRESS_HEADER << EOM
---
header: "SUPPRESS"
---
# Header suppressed
$MDEMO
EOM

read -r -d '' SUPPRESS_ARTICLE << EOM
---
article: "SUPPRESS"
---
# Article suppressed.
**This text should NOT be visible**
$MDEMO
EOM

read -r -d '' SUPPRESS_NAV << EOM
---
nav: "SUPPRESS"
---
# Nav suppressed
$MDEMO
EOM

read -r -d '' SUPPRESS_ASIDE << EOM
---
aside: "SUPPRESS"
---
# Aside suppressed
$MDEMO
EOM

read -r -d '' ASIDE_RIGHT << EOM
---
aside: "right"
---
# Aside right 
$MDEMO
EOM

read -r -d '' ASIDE_LEFT << EOM
---
aside: "left"
---
# Aside left 
$MDEMO
EOM

read -r -d '' SUPPRESS_FOOTER << EOM
---
footer: "SUPPRESS"
---
# Footer suppressed
$MDEMO
EOM

read -r -d '' INDEX << EOM
---
theme: $theme
---
# Tests for theme $theme
$MAIN_LINKS
Supported  features: {{ .supportedfeatures }}
EOM



function generate_theme() {
  echo "Generating theme ${theme}"
  poco -new $tmpdir
  if [[ $? -ne 0 ]]; then
      echo "poco -new failed with error $?"
      exit 1
  fi
  echo $INDEX > $tmpdir/index.md
  echo $DEFAULT > $tmpdir/default.md
  echo $SHADED > $tmpdir/shaded.md
  echo $ARTICLE_ONLY > $tmpdir/article-only.md
  echo $ARTICLE_FILE > $tmpdir/article-file.md
  echo $ARTICLE_FROM_FILE > $tmpdir/article-from-file.md
  echo $SUPPRESS_ARTICLE > $tmpdir/suppress-article.md
  echo $SUPPRESS_HEADER > $tmpdir/suppress-header.md
  echo $SUPPRESS_NAV > $tmpdir/suppress-nav.md
  echo $SUPPRESS_ASIDE > $tmpdir/suppress-aside.md
  echo $ASIDE_RIGHT > $tmpdir/aside-right.md
  echo $ASIDE_LEFT > $tmpdir/aside-left.md
  echo $SUPPRESS_FOOTER > $tmpdir/suppress-footer.md
  cd $tmpdir
  echo "Created file ${tmpdir}/index.md"
  ls $tmpdir/index.html
  poco $LINK_STYLES -verbose $tmpdir
  if [[ $? -ne 0 ]]; then
      echo "Quitting with error $?"
      exit 1
  fi
  open WWW/index.html
}


if [ -f "$theme" ]
then
  echo "Already a theme named ${theme}"
  if wait_for_yes "Replace it?" 
  then
    echo "OK!" 
    generate_theme && exit 0
  else
    echo "No file named ${theme} will be created."
  fi
else

    echo "Generate ${theme}"
    generate_theme && exit 0
fi


