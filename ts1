#!/bin/zsh
# ts1
# Generates a multipage site in a temp directory.
# Visual demonstrations of:
# - global and page themes
# - suppressing header, nav, footer, aside
# 
# Command-line options:
# 
# --theme {theme name}
# -t {theme name}
#
# Example:
#  
#   ts1 --theme pocodocs
#   ts1 --t pocodocs
#

# Default global theme. Can be altered with --theme command line option
#THEME=pocodocs
THEME=test

# Macro for a full demo document
# This inserts a file into the stream
read -r -d '' MDEMO << EOM
$(<.poco/demo/mdemo.md)
EOM


# Quickie test page test-page.md
# Putting it up here makes it easier to 
# throw together ad hoc tests
read -r -d '' TEST_PAGE << EOM
---
pagetheme: "test"
importrules:
- "@import url('https://fonts.googleapis.com/css2?family=Oswald:wght@200&display=swap');"

styles:
- "article>h1{font-family:'Oswald',sans-serif;}"
# - "header{background-color:lightgray}"
# - "aside{background-color:blue}"
# - "footer{background-color:red}" 
# - "article{background-color:gray}" 
# - "nav{background-color:green}" 
---

# SO IS THIS OSWALD

$MDEMO

EOM


# Quickie test header test-header.md
read -r -d '' TEST_HEADER << EOM
# TESTHEAD HERE ON THIS PAGE ONLY
EOM




# UTILITY FUNCTIONS
function pause(){
  echo "Please press enter..."
  read nothing_at_all
}

# xxx
function print_help(){
  echo "Options:"
  echo "\t-t|--theme" >&2
  echo "\tChange default theme for tests. The default is ${THEME}. Example:\n\t${1} --theme pocodocs\n" >&2
  echo "\t-l|--link-stylesheets" >&2
  echo "\tLink to stylesheets instead of inlining in the HTML. The default is inline. Example:\n\t${1} -l\n" >&2
}



# Placeholder SVG image creator
# Creates simple rectange of default width 256, default height 128.
# Puts optional text in the center, and allows an optional
# filename (defaults to ./foo.svg).
# Takes optional width, height, and text parameters, e.g.
# svgplace 648 480 "IMAGE GOES HERE" box.svg
function svgplace() {
WIDTH=256
HEIGHT=128
TEXT=""
FILENAME="./foo.svg"
[ $1 ] && WIDTH=$1
[ $2 ] && HEIGHT=$2
[ $3 ] && TEXT=$3
[ $4 ] && FILENAME=$4
cat <<EOM > $FILENAME
<svg width='$WIDTH' height='$HEIGHT' xmlns='http://www.w3.org/2000/svg' version='1.1' >
<rect width="${WIDTH}" height="${HEIGHT}"  fill="lightgray" stroke="gray" stroke-width=".2"/>
<text text-anchor="middle" x="50%" y="50%" dy=".35em" font-family="sans-serif" font-size="24px" font-weight="bold" fill="black">$3</text> 
</svg>
EOM
echo "Created file ${FILENAME}"
}


# PARSE COMMAND LINE
echo ""
while :; do
    case $1 in
    
   	 -t|--theme)
   		 if [ -n "$2" ]; then
   			 THEME=$2
         #echo "Chose theme ${THEME}"
         #pause
   			 shift 2
   			 continue
   		 else
   			 echo "ERROR: --theme needs a theme name. The default is ${THEME}. \nExample:\n\t${0} --theme pocodocs\n" >&2
   			 #printf 'ERROR: "--theme" needs a theme name.\nExample:\n\t${0} --theme pocodocs\n' >&2
   			 exit 1
   		 fi
   		 ;;
   		 
   	 -l|--link-styles)
       LINK_STYLES="--link-styles"
       shift
       ;;

   	 -h|--help)
        # xxx
       print_help $0
       exit 1
       ;;

   	 --)
   		 shift
   		 break
   		 ;;
   		 
   	 --?*)
   		 printf 'WARNING: Unknown option %s\n' "$1" >&2
       exit 1
       break
   		 ;;
   		 
   	 *)
   		 # No more options. Break out of loop.
   		 break;
    esac
    
    command shift
done


# Create a temporary directory.
# Supposed to work in both MacOS and Linux. Thank you, timo-tijhof 
# https://unix.stackexchange.com/questions/30091/fix-or-alternative-for-mktemp-in-os-x
tmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t 'tmpdir')
echo "Creating poco project at temp directory ${tmpdir}"
poco -new $tmpdir
ALLDIRS=$tmpdir/level2/level3/
mkdir -p  $ALLDIRS
if [[ $? -gt 0 ]]
then
  echo "Error creating subdirs"
fi


# Tests showing how to replace page elements
# The next few constants work together
# and are used on the DEMO_REPLACE_PAGE_ELEMENTS constant
read -r -d '' REPLACE_HEADER << EOM
**Ugly replacement header**
EOM

read -r -d '' REPLACE_NAV << EOM
**Ugly replacement NAV**
EOM

read -r -d '' REPLACE_ASIDE << EOM
**Ugly replacement ASIDE**
EOM

read -r -d '' REPLACE_FOOTER << EOM
**Ugly replacement FOOTER**
EOM

echo $REPLACE_HEADER > $tmpdir/replace-header.md
echo $REPLACE_NAV > $tmpdir/replace-nav.md
echo $REPLACE_ASIDE > $tmpdir/replace-aside.md
echo $REPLACE_FOOTER > $tmpdir/replace-footer.md

read -r -d '' DEMO_REPLACE_PAGE_ELEMENTS << EOM
---
header: "replace-header.md"
footer: "replace-footer.md"
nav: "replace-nav.md"
aside: "replace-aside.md"
title: "Replace page elements on a per-page basis"
---
# WHAT THIS PAGE DEMONSTRATES:

This page shows how to replace page elments
(that is header, footer, nav, and aside) on a per
page bases using this front matter:

    ---
    header: "replace-header.md"
    footer: "replace-footer.md"
    nav: "replace-nav.md"
    aside: "replace-aside.md"
    title: "Replace page elements on a per-page basis"
    ---

The header, footer, aside, and nav for this page should 
all have *ugly replacments*.


See this same with the [default page elements](page-elements-default.html)
supplied by the theme.

$MDEMO
EOM

read -r -d '' DEMO_REPLACE_PAGE_ELEMENTS_DEFAULT << EOM
---
title: "Default page elements"
---
# WHAT THIS PAGE DEMONSTRATES:

This page uses the same theme as [page-elements.md](page-elements.html)
but uses the theme's default page elements (header, nav, aside, and footer).


$MDEMO

hi

EOM






# Generate links used to demonstrate themes
# of subdir navigation
read -r -d '' THEME_NAV << EOM
## Theme demos
* [newman](newman-theme-demo.html) theme
* [hack](hack-theme-demo.html) theme
* [probot](probot-theme-demo.html) theme

EOM



# Generate links used to test support 
# of subdir navigation
read -r -d '' SUBDIR_NAV << EOM
## Click these pages 1 directory levels down

* [Level 2 page 1](level2/page2-1.html) (Uses Tufte theme)
* [Level 2 page 2](level2/page2-2.html) (Overrides parts of theme)

## Click these pages 2 directory levels down

* [Level 3 page 1](level2/level3/page3-1.html)

EOM

# Generate links used to test support 
# of page layout elements
read -r -d '' PGLAYOUT_NAV << EOM
## Page Layout variations

* [Aside on left](aside-left.html)
* [Aside on right](aside-right.html)
* [Suppress header](suppress-header.html)
* [Suppress nav](suppress-nav.html)
* [Suppress aside](suppress-aside.html)
* [Suppress footer](suppress-footer.html)
[Home](/index.html)
EOM


# Generate the page index.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' INDEX << EOM
---
title: "PocoCMS home"
theme: "${THEME}"
styles:
- "header{background-color:lightgray}"
- "aside{background-color:blue}"
- "footer{background-color:red}" 
- "article{background-color:gray}" 
- "nav{background-color:green}" 
---
# Project build tests 
* [Test page](test-page.html)

Is ftime working? {{ .ftime }}

#### Title of this page: {{ .title }}

* Replace [page elements](page-elements.html) such as head, nav, etc. on a per-page basis (default version [here](page-elements-default.html))

hello, world.

* [hack](hack-theme-demo.html) theme

$THEME_NAV
$SUBDIR_NAV
$PGLAYOUT_NAV

$MDEMO

## Square SVG image

![square image here?](./square.svg)

EOM




# Generate the page aside-left.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' ASIDE_LEFT << EOM
---
aside: left
styles:
- "header{background-color:gray}"
- "aside{background-color:blue}"
- "inav{background-color:green}" 
- "footer{background-color:red}" 
- "article{background-color:lightgray}" 
---
# Title of this page: {{ .title }}

This page should have an aside on the **left**. 


$SUBDIR_NAV
$PGLAYOUT_NAV
EOM

# Generate the page aside-right.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' ASIDE_RIGHT << EOM
---
aside: "right"
styles:
- "header{background-color:gray}"
- "aside{background-color:blue}"
- "inav{background-color:green}" 
- "footer{background-color:red}" 
- "article{background-color:lightgray}" 
---
# Title of this page: {{ .title }}

This page should have an aside on the **left**. 

$SUBDIR_NAV
$PGLAYOUT_NAV
EOM

# Generate the page aside-left.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' ASIDE_LEFT << EOM
---
aside: "left"
styles:
- "header{background-color:gray}"
- "aside{background-color:blue}"
- "inav{background-color:green}" 
- "footer{background-color:red}" 
- "article{background-color:lightgray}" 
---
# Title of this page: {{ .title }}

This page should have an aside on the **left**. 
$SUBDIR_NAV
$PGLAYOUT_NAV
EOM

# Generate the page supress-header.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' SUPPRESS_HEADER << EOM
---
header: "SUPPRESS"
---
# This page should have no header. 
$SUBDIR_NAV
$PGLAYOUT_NAV
EOM

# Generate the page supress-aside.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' SUPPRESS_ASIDE << EOM
---
aside: "SUPPRESS"
---
# This page should have no aside. 
$SUBDIR_NAV
$PGLAYOUT_NAV
EOM

# Generate the page supress-nav.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' SUPPRESS_NAV << EOM
---
nav: "SUPPRESS"
---
# This page should have no navbar. 
$SUBDIR_NAV
$PGLAYOUT_NAV
EOM

# Generate the page supress-footer.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' SUPPRESS_FOOTER << EOM
---
footer: "SUPPRESS"
---
# This page should have no footer. 
$SUBDIR_NAV
$PGLAYOUT_NAV
EOM

# Generate the page named page2_1.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' PAGE_2_1 << EOM
---
title: "level2/page2-1"
pagetheme: "tufte"
aside: "left"
---
# Subdirectory level1 is 1 level below root
#### Title of this page: {{ .title }}
## Page level2/page2-1.html
## Click these pages 1 directory level down

* [Level 3 page 1](level3/page3-1.html)
* [Home](./index.html)
EOM

# Generate the page named page2_2.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' PAGE_2_2 << EOM
---
title: "level2/page2-2"
styles: 
- "article>h2{font-weight:bold;color:red;}"
- "article>p{font-size:1.25em;font-style:italic;font-family:'Times New Roman', Times, serif;}"
---
# This page demonstrate style overrides

Note how h2 headers are red, and the body style is now an italic serif font.

## Page level2/page2-2.html
## Click these pages 1 directory level down
* [Level 3 page 1](level3/page3-1.html)
* [Home](./index.html)
EOM


# Generate the page named page3_1.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' PAGE_3_1 << EOM
---
title: "level3/page3-1"
---
# Subdirectory level3 is 2 level below root
## Page level2/level3/page3-1.html
## Click these pages 1 directory level up 
* [Level 2 page 1](../page2-1.html)
* [Level 2 page 2](../page2-2.html)
* [Home](./index.html)
EOM

# Generate the page named probot-theme-demo.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' PROBOT_THEME_DEMO << EOM
---
title: "probot theme"
pagetheme: "probot"
---
# Demonstration of the {{ .pagetheme }} theme.

$MDEMO

Normal text under an h1

## Drilling down into an h2
How amazing can this experience get?
$SUBDIR_NAV
$PGLAYOUT_NAV
EOM

# Generate the page named newman-theme-demo.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' NEWMAN_THEME_DEMO << EOM
---
title: "{{ .theme }} theme"
pagetheme: "newman"
aside: "SUPPRESS"
---
# Demonstration of the {{ .pagetheme }} theme.

$MDEMO
EOM


# Generate the page named hack-theme-demo.md from the text
# directly under the read until the text directly
# above the second EOM
read -r -d '' HACK_THEME_DEMO << EOM
---
title: "hack theme"
pagetheme: "hack"
styles:
- "body{margin:2em}"
---
# Demonstration of the {{ .pagetheme }} theme.

$MDEMO

Normal text under an h1

## Drilling down into an h2
How amazing can this experience get?
$SUBDIR_NAV
$PGLAYOUT_NAV
EOM


#echo "\nlevel2 dir:"
#ls $tmpdir/level2
#echo "\nlevel3 dir:"
#ls $tmpdir/level3

svgplace 128 128 "128x128" "${tmpdir}/square.svg"

echo $INDEX > $tmpdir/index.md
echo $DEMO_REPLACE_PAGE_ELEMENTS > $tmpdir/page-elements.md
echo $DEMO_REPLACE_PAGE_ELEMENTS_DEFAULT > $tmpdir/page-elements-default.md
echo $TEST_PAGE > $tmpdir/test-page.md
echo $TEST_HEADER > $tmpdir/test-header.md
echo $ASIDE_LEFT > $tmpdir/aside-left.md
echo $ASIDE_RIGHT > $tmpdir/aside-right.md
echo $SUPPRESS_HEADER > $tmpdir/suppress-header.md
echo $SUPPRESS_ASIDE > $tmpdir/suppress-aside.md
echo $SUPPRESS_NAV > $tmpdir/suppress-nav.md
echo $SUPPRESS_FOOTER > $tmpdir/suppress-footer.md
echo $PAGE_2_1 > $tmpdir/level2/page2-1.md
echo $PAGE_2_2 > $tmpdir/level2/page2-2.md
echo $PAGE_3_1 > $tmpdir/level2/level3/page3-1.md
echo $HACK_THEME_DEMO > $tmpdir/hack-theme-demo.md
echo $NEWMAN_THEME_DEMO > $tmpdir/newman-theme-demo.md
echo $PROBOT_THEME_DEMO > $tmpdir/probot-theme-demo.md
poco -verbose $LINK_STYLES $tmpdir
if [[ $? -gt 0 ]]
then
  echo "Poco was unable to create the project"
  echo "Contents of the directory:"
  ls ${tmpdir}
else
  echo "Project created successfully"
  open $tmpdir/WWW/index.html
  #echo "Opening in local browser and local server"
  cd $tmpdir
  #poco -serve
fi

