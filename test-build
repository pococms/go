#!/bin/zsh
# 12/5/22: Still has usable code I think but Superseded by the less ambitious ts1
# Create a temporary directory.
# Supposed to work in both MacOS and Linux. Thank you, timo-tijhof 
# https://unix.stackexchange.com/questions/30091/fix-or-alternative-for-mktemp-in-os-x
tmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t 'tmpdir')
echo "Run poco on nonexistent directory"
poco $tmpdir
poco foo
if [ $? -eq 0 ]; then
  echo "poco status:  success"
else
  echo "poco status: error ${?}"
fi

PAGE1=page1


# Displays prompt, and waits for user to answer 
# with either a Y or N. Repeats prompt until
# it gets one of those two.
# Return 0 if answer was Y,
# return 1 if answer was N.
# 
# Answer is in the global variable $?
#
# Example usage:
#   wait_for_yes "Please enter y or n "
wait_for_yes() {
  while :; do
    echo -n "${1} "
    read answer
    case "$answer" in
      [Yy])
        return 0
        ;;
      [Nn])
        return 1
        ;;
      *)
        ;;
    esac
  done
}

# Displays prompt, and waits for user to press Enter. 
#   wait_for_enter "Please press enter"
wait_for_enter() {
    echo -n "${1} "
    read answer
}




# Generate a page at peer level to the home page in the project
# Writes its contents to $PAGE1_TEXT
read -r -d '' PAGE1_TEXT << EOM
# Project build tests 
## Test links to subdirectories
[Level 2 page 1](level2/page2-1.html)
[Level 2 page 2](level2/page2-2.html)
[Home](index.html)
EOM

# Generate 2 pages 1 subdirectory level down 
read -r -d '' PAGE21 << EOM
# Level 2 subdirectory, page 1
[Page 2-2](page2-2.html)
[Home](/index.html) 
EOM

read -r -d '' PAGE22 << EOM
# Level 2 subdirectory, page 2
[Page 2-1](page2-1.html)
[Home](/index.html) 
EOM

# Generate pages 2 subdirectory levels down 
read -r -d '' PAGE31 << EOM
# Level 3 subdirectory, page 1
### Click these Level 2 pages
[Page 2-1](../page2-1.html)
[Page 2-2](../page2-2.html)
[Home](/index.html) 
EOM

echo "Got here"

wait_for_enter "about to create $TMPDIR"

poco -new $TMPDIR
#echo About to create $PAGE1from $PAGE1_TEXT 
echo $PAGE1_TEXT > $TMPDIR/$PAGE1.md

echo $PAGE21 > $TMPDIR/level2/"page2-1.md"
echo $PAGE22 > $TMPDIR/level2/"page2-2.md"
echo $PAGE31 > $TMPDIR/level2/level3/"page3-1.md"
read answer
open $TMPDIR/WWW/index.html

#generate_page() $PAGE1 $PAGE1_TEXT
echo  "Dir $TMPDIR/$PAGE1":
ls -lat  ${TMPDIR}/page???.html
ls -lat  ${TMPDIR}/level2/page???.html
ls -lat  ${TMPDIR}/level2/level3/page???.html

# Creates the page named $1 in directory $2
function generate_page() {
  echo "Generating ${PAGE1}"
  echo $PAGE1_TEXT > $PAGE1 
  echo "Is ${PAGE1} here?"
  ls ${PAGE1} 
}


## CLEAN UP
#wait_for_yes "Delete temporary directory $TMPDIR?"


